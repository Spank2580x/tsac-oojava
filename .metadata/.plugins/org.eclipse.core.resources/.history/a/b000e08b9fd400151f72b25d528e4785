package main;

import java.util.Random;

/**
 * NON MODIFICARE
 */
public class PressureSensor implements PressureSensorListener {// implements?

	private Random rand = new Random(240);
	private Random randErrorCode = new Random(8);
	private PressureSensorListener listener;

	/**
	 * Imposta callback
	 * 
	 * @param listener
	 *            callback richiamata dal metodo next()
	 */
	@Override
	public double onSuccess(double pressure) {
		return pressure;
		System.out.println();
	}
	public PressureSensorException onFailed(PressureSensorException exception){
		return exception;
		
	}
	public void setListener(PressureSensorListener listener) {
		this.listener = listener;
	}

	/**
	 * Ad ogni chiamata viene invocata la callback impostata su setListener. In
	 * caso di lettura corretta viene fornito il valore nella callback
	 * onSuccess. In caso di errore viene fornita sulla callback onFailed
	 * l'exception, con relativo codice di errore.
	 */
	public void next() {
		if (listener == null)
			return;

		// successo/errore simulato.
		double val = rand.nextDouble() * 20.0 - 1.0;
		System.out.println(val);
		if (val > 0) {
			listener.onSuccess(val);
		} else {
			listener.onFailed(new PressureSensorException("Pressure Error", randErrorCode.nextInt(10) * -1));
		}
	}

}
